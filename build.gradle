buildscript {
    repositories {
        maven { url 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'maven-publish'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

version = "${modVersion}"
group = "com.github.${groupId}"
archivesBaseName = "${modId}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: "${parchmentVersion}-${minecraftVersion}"
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.mojang.level', 'debug'
            property 'mixin.debug.export', 'true'
            arg "-mixin.config=${modId}.mixins.json"

            mods {
                reincarnation_plus {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runServer')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug.export', 'true'

            arg "nogui"

            mods {
                reincarnation_plus {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${modId}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', "manascore"

            mods {
                reincarnation_plus {
                    source sourceSets.main
                }
            }
        }
    }
}

jarJar.enable()

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url = 'https://maven.minecraftforge.net' }

    maven {
        url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }

    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven { url = "https://www.cursemaven.com" } // CurseForge

    maven { url "https://dl.cloudsmith.io/public/manasmods/manascore/maven/" }

    maven { url 'https://jitpack.io' }

    maven { url "https://maven.firstdarkdev.xyz/snapshots" }

    flatDir {
        dirs 'lib'
    }
}

dependencies {
    //Minecraft Forge
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"

    // ManasCore and Dependencies
    implementation fg.deobf("com.github.manasmods:ManasCore:${minecraftVersion}-${manasCoreVersion}:slim")
    implementation fg.deobf("com.lowdragmc.photon:photon-forge-${minecraftVersion}:${photonVersion}") {
        transitive = false
    }
    implementation fg.deobf("com.lowdragmc.ldlib:ldlib-forge-${minecraftVersion}:${ldlibVersion}") {
        transitive = false
    }
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixinExtrasVersion}"))
    implementation("io.github.llamalad7:mixinextras-forge:${mixinExtrasVersion}")
    runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-1.19:3.1.40")

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Tensura
//    implementation fg.deobf("com.github.manasmods:TensuraMod:${minecraftVersion}-${tensuraVersion}")
    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${minecraftVersion}-${terraBlenderVersion}")

    //IsekaiCore
    implementation fg.deobf("blank:${isekaiCoreModId}:${isekaiCoreVersion}")
}

mixin {
    add sourceSets.main, "${modId}.refmap.json"
    config "${modId}.mixins.json"
}

reobf {
    // jarJar {}
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${modId}",
                "Specification-Vendor"    : "${modId}sareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "${modId}sareussareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${modId}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
